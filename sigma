local library = {}
library.Flags = {}
library.DefaultColor = Color3.fromRGB(56, 207, 154)
library.YSpacing = 38

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local Blacklist = {Enum.KeyCode.Unknown, Enum.KeyCode.CapsLock, Enum.KeyCode.Escape, Enum.KeyCode.Tab, Enum.KeyCode.Return, Enum.KeyCode.Backspace, Enum.KeyCode.Space, Enum.KeyCode.W, Enum.KeyCode.A, Enum.KeyCode.S, Enum.KeyCode.D}

-- Clear existing Revenant GUI
for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
    if v.Name == "Revenant" then
        v:Destroy()
    end
end

function library:GetXY(GuiObject)
    local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
    local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
    return Px / Max, Py / May
end

function library:Toggle()
    for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
        if v.Name == "Revenant" then
            v.Enabled = not v.Enabled
        end
    end
end

-- Notification Library Setup
if not game:GetService("CoreGui"):FindFirstChild("NotificationLibrary") then
    local notificationLibrary = Instance.new("ScreenGui")
    notificationLibrary.Name = "NotificationLibrary"
    notificationLibrary.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    notificationLibrary.Parent = game:GetService("CoreGui")

    local notificationHolder = Instance.new("Frame")
    notificationHolder.Name = "NotificationHolder"
    notificationHolder.AnchorPoint = Vector2.new(0, 0.5)
    notificationHolder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    notificationHolder.BackgroundTransparency = 1
    notificationHolder.Position = UDim2.fromScale(0, 0.5)
    notificationHolder.Size = UDim2.fromScale(0.8, 1)
    notificationHolder.Parent = notificationLibrary

    local notificationUIListLayout = Instance.new("UIListLayout")
    notificationUIListLayout.Name = "NotificationUIListLayout"
    notificationUIListLayout.FillDirection = Enum.FillDirection.Vertical
    notificationUIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notificationUIListLayout.Padding = UDim.new(0, 4)
    notificationUIListLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
    notificationUIListLayout.Parent = notificationHolder

    local notificationUIPadding = Instance.new("UIPadding")
    notificationUIPadding.Name = "NotificationUIPadding"
    notificationUIPadding.PaddingBottom = UDim.new(0, 9)
    notificationUIPadding.PaddingLeft = UDim.new(0, 5)
    notificationUIPadding.Parent = notificationHolder
end

local NotificationLib = game:GetService("CoreGui"):FindFirstChild("NotificationLibrary")
local Holder = NotificationLib:FindFirstChild("NotificationHolder")

function library:Notification(NotificationInfo)
    NotificationInfo.Text = NotificationInfo.Text or "This is a notification."
    NotificationInfo.Duration = NotificationInfo.Duration or 5
    NotificationInfo.Color = NotificationInfo.Color or library.DefaultColor

    local notificationText = Instance.new("TextLabel")
    notificationText.Name = "NotificationText"
    notificationText.ClipsDescendants = true
    notificationText.Font = Enum.Font.GothamBold
    notificationText.Text = NotificationInfo.Text
    notificationText.TextColor3 = Color3.fromRGB(214, 214, 214)
    notificationText.TextSize = 14
    notificationText.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
    notificationText.BorderSizePixel = 0
    notificationText.Position = UDim2.fromScale(0, 0.954)
    notificationText.Size = UDim2.fromOffset(0, 38)
    notificationText.Parent = Holder

    local outerFrame = Instance.new("Frame")
    outerFrame.Name = "OuterFrame"
    outerFrame.AnchorPoint = Vector2.new(0, 1)
    outerFrame.BackgroundColor3 = NotificationInfo.Color
    outerFrame.BorderSizePixel = 0
    outerFrame.Position = UDim2.fromScale(0, 1)
    outerFrame.Size = UDim2.new(1, 0, 0, 3)
    outerFrame.ZIndex = 2
    outerFrame.Parent = notificationText

    local notificationUICorner = Instance.new("UICorner")
    notificationUICorner.Name = "NotificationUICorner"
    notificationUICorner.CornerRadius = UDim.new(0, 4)
    notificationUICorner.Parent = notificationText

    local innerFrame = Instance.new("Frame")
    innerFrame.Name = "InnerFrame"
    innerFrame.AnchorPoint = Vector2.new(0, 1)
    innerFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38)
    innerFrame.BorderSizePixel = 0
    innerFrame.Position = UDim2.fromScale(0, 1)
    innerFrame.Size = UDim2.new(1, 0, 0, 3)
    innerFrame.Parent = notificationText

    local NotifText = notificationText
    local TextBounds = NotifText.TextBounds

    coroutine.wrap(function()
        local InTween = TweenService:Create(NotifText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, TextBounds.X + 20, 0, 38)})
        InTween:Play()
        InTween.Completed:Wait()

        local LineTween = TweenService:Create(outerFrame, TweenInfo.new(NotificationInfo.Duration, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Size = UDim2.new(0, 0, 0, 3)})
        LineTween:Play()
        LineTween.Completed:Wait()

        local OutTween = TweenService:Create(NotifText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = UDim2.new(0, 0, 0, 38)})
        OutTween:Play()
        OutTween.Completed:Wait()
        notificationText:Destroy()
    end)()
end

local request = syn and syn.request or http and http.request or http_request or request or httprequest
local getcustomasset = getcustomasset or getsynasset
local isfolder = isfolder or syn_isfolder or is_folder
local makefolder = makefolder or make_folder or createfolder or create_folder

if not isfolder("Revenant") then
    makefolder("Revenant")
    local Circle = request({
        Url = "https://github.com/Rain-Design/Libraries/blob/main/Icon/Circle.png?raw=true",
        Method = "GET"
    })
    writefile("Revenant/Circle.png", Circle.Body)
    library:Notification({
        Text = "Downloaded Toggle Circle Asset.",
        Duration = 3
    })
    local Collapse = request({
        Url = "https://github.com/Rain-Design/Libraries/blob/main/Icon/CollapseArrow.png?raw=true",
        Method = "GET"
    })
    writefile("Revenant/Collapse.png", Collapse.Body)
    library:Notification({
        Text = "Downloaded Collapse Asset.",
        Duration = 3
    })
end

function library:Window(Info)
    Info.Text = Info.Text or "Revenant"

    local Pos = 0.05
    for _, v in pairs(game:GetService("CoreGui"):GetChildren()) do
        if v.Name == "Revenant" then
            Pos = Pos + 0.12
        end
    end

    local insidewindow = {}
    local revenant = Instance.new("ScreenGui")
    revenant.Name = "Revenant"
    revenant.Parent = game:GetService("CoreGui")

    local WindowOpened = Instance.new("BoolValue", revenant)
    WindowOpened.Value = true

    local topbar = Instance.new("Frame")
    topbar.Name = "Topbar"
    topbar.BackgroundColor3 = Color3.fromRGB(29, 29, 29)
    topbar.Position = UDim2.fromScale(Pos, 0.1)
    topbar.Size = UDim2.fromOffset(225, 38)
    topbar.Parent = revenant

    local dragging, dragInput, dragStart, startPos
    local function update(input)
        local delta = input.Position - dragStart
        topbar.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = topbar.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    topbar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    local uICorner = Instance.new("UICorner")
    uICorner.Name = "UICorner"
    uICorner.CornerRadius = UDim.new(0, 4)
    uICorner.Parent = topbar

    local BackgroundSize = 0
    local backgroundFrame = Instance.new("Frame")
    backgroundFrame.Name = "BackgroundFrame"
    backgroundFrame.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
    backgroundFrame.BorderSizePixel = 0
    backgroundFrame.ClipsDescendants = false
    backgroundFrame.Position = UDim2.fromScale(0, 1)
    backgroundFrame.Size = UDim2.fromOffset(225, 0)
    backgroundFrame.Parent = topbar

    local uICorner1 = Instance.new("UICorner")
    uICorner1.Name = "UICorner"
    uICorner1.CornerRadius = UDim.new(0, 4)
    uICorner1.Parent = backgroundFrame

    local fixLine = Instance.new("Frame")
    fixLine.Name = "FixLine"
    fixLine.AnchorPoint = Vector2.new(0.5, 0)
    fixLine.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
    fixLine.BorderSizePixel = 0
    fixLine.Position = UDim2.fromScale(0.5, 0)
    fixLine.Size = UDim2.fromOffset(225, 2)
    fixLine.ZIndex = 2
    fixLine.Parent = backgroundFrame

    local itemContainer = Instance.new("Frame")
    itemContainer.Name = "ItemContainer"
    itemContainer.AnchorPoint = Vector2.new(0.5, 0)
    itemContainer.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
    itemContainer.BackgroundTransparency = 1
    itemContainer.BorderSizePixel = 0
    itemContainer.Position = UDim2.fromScale(0.5, 0)
    itemContainer.Size = UDim2.fromOffset(225, 0)
    itemContainer.Parent = backgroundFrame

    itemContainer.ChildAdded:Connect(function(v)
        if v.ClassName ~= "UIListLayout" then
            if v.Name ~= "Slider" then
                backgroundFrame.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset + library.YSpacing)
                itemContainer.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset + library.YSpacing)
                BackgroundSize = BackgroundSize + library.YSpacing
            else
                backgroundFrame.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset + 38)
                itemContainer.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset + 38)
                BackgroundSize = BackgroundSize + 38
            end
        end
    end)

    itemContainer.ChildRemoved:Connect(function(v)
        if v.ClassName ~= "UIListLayout" then
            if v.Name ~= "Slider" then
                backgroundFrame.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset - library.YSpacing)
                itemContainer.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset - library.YSpacing)
                BackgroundSize = BackgroundSize - library.YSpacing
            else
                backgroundFrame.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset - 38)
                itemContainer.Size = UDim2.new(0, 225, 0, itemContainer.Size.Y.Offset - 38)
                BackgroundSize = BackgroundSize - 38
            end
        end
    end)

    local uIListLayout = Instance.new("UIListLayout")
    uIListLayout.Name = "UIListLayout"
    uIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    uIListLayout.Parent = itemContainer

    function insidewindow:Toggle(Info)
        Info.Text = Info.Text or "Toggle"
        Info.Flag = Info.Flag or Info.Text
        Info.Callback = Info.Callback or function() end

        local insidetoggle = {}
        library.Flags[Info.Flag] = false
        local Toggled = false
        local PressKey = nil
        local Changing = false
        local KeybindConnection

        local toggle = Instance.new("Frame")
        toggle.Name = "Toggle"
        toggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
        toggle.Size = UDim2.fromOffset(225, library.YSpacing)
        toggle.Parent = itemContainer

        local uICorner = Instance.new("UICorner")
        uICorner.Name = "UICorner"
        uICorner.CornerRadius = UDim.new(0, 4)
        uICorner.Parent = toggle

        local fixLineToggle = Instance.new("Frame")
        fixLineToggle.Name = "FixLine"
        fixLineToggle.AnchorPoint = Vector2.new(0.5, 1)
        fixLineToggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
        fixLineToggle.BorderSizePixel = 0
        fixLineToggle.Position = UDim2.fromScale(0.5, 0.0526)
        fixLineToggle.Size = UDim2.fromOffset(225, 4)
        fixLineToggle.Parent = toggle

        local toggleTextButton = Instance.new("TextButton")
        toggleTextButton.Name = "ToggleTextButton"
        toggleTextButton.Font = Enum.Font.GothamBold
        toggleTextButton.Text = ""
        toggleTextButton.TextColor3 = Color3.fromRGB(214, 214, 214)
        toggleTextButton.TextSize = 13
        toggleTextButton.AutoButtonColor = false
        toggleTextButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        toggleTextButton.BackgroundTransparency = 1
        toggleTextButton.Size = UDim2.fromOffset(225, library.YSpacing)
        toggleTextButton.Parent = toggle

        local toggleTextLabel = Instance.new("TextLabel")
        toggleTextLabel.Name = "ToggleTextLabel"
        toggleTextLabel.Font = Enum.Font.GothamBold
        toggleTextLabel.Text = Info.Text
        toggleTextLabel.TextColor3 = Color3.fromRGB(214, 214, 214)
        toggleTextLabel.TextSize = 13
        toggleTextLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleTextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        toggleTextLabel.BackgroundTransparency = 1
        toggleTextLabel.Position = UDim2.fromScale(0.0489, 0)
        toggleTextLabel.Size = UDim2.fromOffset(214, library.YSpacing)
        toggleTextLabel.Parent = toggle

        local keybindText = Instance.new("TextLabel")
        keybindText.Name = "KeybindText"
        keybindText.Font = Enum.Font.GothamBold
        keybindText.Text = "None"
        keybindText.TextColor3 = Color3.fromRGB(214, 214, 214)
        keybindText.TextSize = 12
        keybindText.TextXAlignment = Enum.TextXAlignment.Right
        keybindText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        keybindText.BackgroundTransparency = 1
        keybindText.Position = UDim2.fromScale(0.8, 0)
        keybindText.Size = UDim2.fromOffset(50, library.YSpacing)
        keybindText.Parent = toggle

        local outerFrame = Instance.new("Frame")
        outerFrame.Name = "OuterFrame"
        outerFrame.AnchorPoint = Vector2.new(1, .5)
        outerFrame.BackgroundColor3 = Color3.fromRGB(62, 62, 62)
        outerFrame.BorderSizePixel = 0
        outerFrame.Position = UDim2.new(1, -15, .5, 0)
        outerFrame.Size = UDim2.fromOffset(38, 17)
        outerFrame.Parent = toggle

        local uICorner1 = Instance.new("UICorner")
        uICorner1.Name = "UICorner"
        uICorner1.CornerRadius = UDim.new(1, 0)
        uICorner1.Parent = outerFrame

        local innerFrame = Instance.new("ImageLabel")
        innerFrame.Name = "InnerFrame"
        innerFrame.Image = getcustomasset("Revenant/Circle.png")
        innerFrame.ResampleMode = "Pixelated"
        innerFrame.ImageColor3 = Color3.fromRGB(255, 255, 255)
        innerFrame.BackgroundTransparency = 1
        innerFrame.Position = UDim2.fromOffset(3, 2)
        innerFrame.Size = UDim2.fromOffset(13, 13)
        innerFrame.Parent = outerFrame

        toggle.MouseEnter:Connect(function()
            fixLineToggle.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
            toggle.BackgroundColor3 = Color3.fromRGB(44, 44, 44)
        end)

        toggle.MouseLeave:Connect(function()
            fixLineToggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
            toggle.BackgroundColor3 = Color3.fromRGB(36, 36, 36)
        end)

        local function toggleState()
            Toggled = not Toggled
            library.Flags[Info.Flag] = Toggled
            TweenService:Create(innerFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = Toggled and UDim2.new(0, 22, 0, 2) or UDim2.new(0, 3, 0, 2)}):Play()
            TweenService:Create(outerFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundColor3 = Toggled and library.DefaultColor or Color3.fromRGB(62, 62, 62)}):Play()
            pcall(Info.Callback, Toggled)
        end

        toggleTextButton.MouseButton1Click:Connect(toggleState)

        -- Full-screen prompt for keybind
        local promptScreen = Instance.new("ScreenGui")
        promptScreen.Name = "KeybindPrompt"
        promptScreen.Parent = game:GetService("CoreGui")
        promptScreen.Enabled = false

        local promptText = Instance.new("TextLabel")
        promptText.Size = UDim2.new(1, 0, 1, 0)
        promptText.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        promptText.BackgroundTransparency = 0.5
        promptText.Text = "Which letter should I use?"
        promptText.TextColor3 = Color3.fromRGB(255, 255, 255)
        promptText.TextSize = 50
        promptText.Font = Enum.Font.GothamBold
        promptText.TextTransparency = 0
        promptText.ZIndex = 1000
        promptText.Parent = promptScreen

        toggleTextButton.MouseButton3Click:Connect(function()
            if KeybindConnection then KeybindConnection:Disconnect() end
            Changing = true
            keybindText.Text = "..."
            promptScreen.Enabled = true
            KeybindConnection = UserInputService.InputBegan:Connect(function(Key, gameProcessed)
                if not table.find(Blacklist, Key.KeyCode) and not gameProcessed then
                    KeybindConnection:Disconnect()
                    keybindText.Text = Key.KeyCode.Name
                    PressKey = Key.KeyCode
                    promptScreen.Enabled = false
                    wait(0.1)
                    Changing = false
                end
            end)
        end)

        UserInputService.InputBegan:Connect(function(Key, gameProcessed)
            if not Changing and Key.KeyCode == PressKey and not gameProcessed then
                toggleState()
            end
        end)

        function insidetoggle:Set(ToggleInfo)
            ToggleInfo.Bool = ToggleInfo.Bool or false
            Toggled = ToggleInfo.Bool
            library.Flags[Info.Flag] = ToggleInfo.Bool
            TweenService:Create(innerFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Position = ToggleInfo.Bool and UDim2.new(0, 22, 0, 2) or UDim2.new(0, 3, 0, 2)}):Play()
            TweenService:Create(outerFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {BackgroundColor3 = ToggleInfo.Bool and library.DefaultColor or Color3.fromRGB(62, 62, 62)}):Play()
            pcall(Info.Callback, ToggleInfo.Bool)
        end

        return insidetoggle
    end

    local fixLine2 = Instance.new("Frame")
    fixLine2.Name = "FixLine"
    fixLine2.AnchorPoint = Vector2.new(0.5, 1)
    fixLine2.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    fixLine2.BorderSizePixel = 0
    fixLine2.Position = UDim2.fromScale(0.5, 1)
    fixLine2.Size = UDim2.fromOffset(225, 2)
    fixLine2.ZIndex = 2
    fixLine2.Parent = topbar

    local windowText = Instance.new("TextLabel")
    windowText.Name = "WindowText"
    windowText.Font = Enum.Font.GothamBold
    windowText.Text = Info.Text
    windowText.TextColor3 = Color3.fromRGB(214, 214, 214)
    windowText.TextSize = 14
    windowText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    windowText.BackgroundTransparency = 1
    windowText.Size = UDim2.fromOffset(225, 38)
    windowText.Parent = topbar

    local close = Instance.new("ImageButton")
    close.Name = "Close"
    close.Image = getcustomasset("Revenant/Collapse.png")
    close.Active = true
    close.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    close.BackgroundTransparency = 1
    close.Position = UDim2.fromScale(0.876, 0.263)
    close.Selectable = false
    close.Rotation = 180
    close.Size = UDim2.fromOffset(17, 17)
    close.Parent = topbar

    close.MouseButton1Click:Connect(function()
        WindowOpened.Value = not WindowOpened.Value
        backgroundFrame.ClipsDescendants = WindowOpened.Value and false or true
        TweenService:Create(backgroundFrame, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Size = WindowOpened.Value and UDim2.new(0, 225, 0, BackgroundSize) or UDim2.new(0, 225, 0, 0)}):Play()
        TweenService:Create(close, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {Rotation = WindowOpened.Value and 180 or 0}):Play()
    end)

    return insidewindow
end

-- Example usage
local window = library:Window({Text = "Keybind Toggle"})
local toggle = window:Toggle({
    Text = "Toggle with Keybind",
    Callback = function(state)
        library:Notification({
            Text = "Toggle is now " .. (state and "ON" or "OFF"),
            Duration = 2
        })
    end
})
